- var withInstructions = false
- var bodyClass = withInstructions ? 'has-instructions' : '';

doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Gradient Circus

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body(class=bodyClass)

    article

      if withInstructions
        section.preamble(data-bespoke-state='preamble', data-bespoke-hash='preamble')
          h2 Hi there
          p Welcome to this slide deck, built for a presentation at <a href="http://sydcss.com/">SydCSS</a> in July 2015.
          p Before you go browsing these slides, here are some things you should know:
          ul
            li This deck was built and tested for use in one browser (Chrome) running on one machine (mine).
              | Any other combination has no guarantees of working as expected.
            li Use left/right arrow keys or spacebar to navigate the slides.
            li Some slides have interactive content.
              | Extra instructions have been added to these slides <span class="instructions-preview">in this style</span>.
            li Source code for the slides is <a href="https://github.com/gilmoreorless/sydcss-preso-gradient-circus">on GitHub</a>.
          p You may proceed when ready.
          p.go-go-gadget-slides ☞

      section.intro(data-bespoke-hash='intro')
        h2
          | Who’s this bozo?
          img(src='images/bozo.png')
        ul
          li <a href="https://twitter.com/iamnotyourbroom">@iamnotyourbroom</a>
          li <a href="https://shoehornwithteeth.com/">shoehornwithteeth.com</a>
          li Web tinkerer

      section.middle(data-bespoke-hash='seuss')
        img(src='images/If-I-ran-the-circus.jpg', height='70%')

      section(data-bespoke-state='title', data-bespoke-backdrop='title', data-bespoke-hash='gradient-circus')
        h1 Gradient Circus

      section(data-bespoke-hash='types')
        h2 Types of gradients
        ul.gradient-gallery
          li.linear
            span.example
            code linear-gradient
          li.radial
            span.example
            code radial-gradient
          li.repeating-linear
            span.example
            code repeating-linear-gradient
          li.repeating-radial
            span.example
            code repeating-radial-gradient

      section(data-bespoke-hash='support')
        h2 Support
        p: a(href='http://caniuse.com/#feat=css-gradients') No prefixes needed!
        p: img(src='images/caniuse-gradients.png')


      // ACT I

      section(data-bespoke-state='title', data-bespoke-backdrop='title', data-bespoke-hash='act-i-tips')
        h1 Act I
        h2 Tips and tricks

      section.patterns(data-bespoke-hash='patterns')
        h2 Patterns
        .single-bullet(data-linked-step=0)
          p Gradients only &mdash; <a href="http://lea.verou.me/css3patterns/">lea.verou.me/css3patterns</a>
          p: img(src='images/gradient-gallery-lea.png', data-href='http://lea.verou.me/css3patterns/')
        .single-bullet(data-linked-step=1)
          p Gradients + blend modes &mdash; <a href="http://bennettfeely.com/gradients/">bennettfeely.com/gradients</a>
          p: img(src='images/gradient-gallery-bennett.png', data-href='http://bennettfeely.com/gradients/')

      section(data-bespoke-hash='pictures')
        h2 Pictures
        p A single div &mdash; <a href="http://a.singlediv.com/">a.singlediv.com</a>
        p: img(src='images/gradient-gallery-asinglediv.png', data-href='http://a.singlediv.com/')

      section(data-bespoke-hash='themes')
        h2 Themes
        p Blatant self promotion &mdash; <a href="https://gilmoreorless.github.io/">gilmoreorless.github.io</a>
        p: img(src='images/gradient-gallery-gilmoreorless.png', data-href='https://gilmoreorless.github.io/')

      section(data-bespoke-hash='debugging')
        h2 Debugging
        p Gradient Inspector &mdash; <a href="https://chrome.google.com/webstore/detail/css-gradient-inspector/blklpjonlhpakchaahdnkcjkfmccmdik">Chrome Extension</a>
        p: img(src='images/gradient-inspector.png')

      section(data-bespoke-hash='placeholders')
        h2 Placeholders
        p Gradify &mdash; <a href="http://www.gradifycss.com/">gradifycss.com</a>
        if withInstructions
          p: img(src='images/gradifycss-1.jpg', data-swap-src='images/gradifycss-2.jpg', data-swap-time=3)
        else
          p: video(src='images/gradifycss.mov', loop, data-autoplay-slide, data-href='http://www.gradifycss.com/')

      section(data-bespoke-state='grey-area', data-bespoke-hash='animation')
        h2 Background animation
        p Bit of a grey area
        ul
          li One spec says <strong>no</strong>
          li One spec says <strong>yes</strong>
          li Browsers say <strong>um, maybe&hellip;?</strong>
        table.anim-support(data-linked-step=1)
          tr
            th
            th Cross-fade pictures
            th Transition gradients
          tr
            th Chrome
            td ✔
            td -
          tr
            th Safari
            td ✔
            td -
          tr
            th IE / Edge
            td -
            td ✔
          tr
            th Firefox
            td -
            td -

      section(data-bespoke-hash='future')
        h2 The future
        p: <a href="http://dev.w3.org/csswg/css-images-4/">CSS Images Level 4</a> &mdash; Nowhere near finished
        p Among other things, it has&hellip;
        h3 Conic gradients
        .conic-comparison
          .no(data-linked-step=1)
            p Not this
            .example: img(src='images/harry.jpg')
          .yes(data-linked-step=2)
            p This
            .example

      section(data-bespoke-hash='future-today')
        h2 The future &ndash; today
        p: em Obligatory slide about Lea Verou
        ul
          li From <a href="http://lea.verou.me/specs/conical-gradient/">rough spec</a> to <a href="http://www.w3.org/TR/css4-images/#conic-gradients">proper spec</a>
          li Polyfill: <a href="https://leaverou.github.io/conic-gradient/">leaverou.github.io/conic-gradient</a>
          li Use it, promote it, harass browsers for support
        .conic-comparison.conic-demos
          .conic-demo-1: .example
          .conic-demo-2: .example
          .conic-demo-3: .example


      // ACT II

      section(data-bespoke-state='title', data-bespoke-backdrop='title', data-bespoke-hash='act-ii-angles')
        h1 Act II
        h2 Linear gradient angles

      section(data-bespoke-hash='do-you-really')
        h2 Do you really understand?
        p: a(href='https://medium.com/@patrickbrosset/do-you-really-understand-css-linear-gradients-631d9a895caf') Patrick Brosset on Medium
        if withInstructions
          p: img(src='images/pbrosset-medium.jpg')
        else
          p: video(src='images/pbrosset-medium.mov', data-autoplay-slide)

      section(data-bespoke-state='middle', data-bespoke-hash='linear-angles')
        if withInstructions
          p: img(src='images/pbrosset-codepen.gif', data-href='http://codepen.io/captainbrosset/full/ByqRMB/')
        else
          p: video(src='images/pbrosset-codepen.mov', data-href='http://codepen.io/captainbrosset/full/ByqRMB/')


      // ACT III

      section(data-bespoke-state='title', data-bespoke-backdrop='title', data-bespoke-hash='act-iii-layering')
        h1 Act III
        h2 Background image layering

      section.demo-layering(data-bgimage-showcase, data-bespoke-state='showcase', data-bespoke-hash='layering')
        h2 Images from the top, then colour
        p Remember, gradients are just images
        .code-steps
          .code-steps-code
            pre
              code.language-css.
                background-color:
                  skyblue;
                background-image:
                  url(...),
                  linear-gradient(...),
                  radial-gradient(...);
          .code-steps-info
            .showcase-container
              .showcase-target
        p.instructions Use number keys <kbd>1</kbd> to <kbd>4</kbd> to change the image

      section.demo-positioning(data-bgimage-showcase, data-bespoke-state='showcase', data-bespoke-hash='positioning')
        h2 Images from the top, then colour
        .code-steps
          .code-steps-code
            pre
              code.language-css.
                background-repeat:
                  no-repeat;
                background-size:
                  60% 100%;
                background-position:
                  100% 0,
                  0 0;
                background-image:
                  radial-gradient(...),
                  radial-gradient(...);
          .code-steps-info
            .showcase-container
              .showcase-target
        p.instructions Use number keys <kbd>1</kbd> to <kbd>4</kbd> to change the image


      // ACT IV

      section(data-bespoke-state='title', data-bespoke-backdrop='title', data-bespoke-hash='act-iv-colour')
        h1 Act IV
        h2 Colour calculations

      section.demo-colour-calcs(data-bespoke-hash='colour-interpolation')
        h2 A basic example
        .example(style='background:linear-gradient(to right, hsl(220, 90%, 50%), hsl(0, 90%, 60%));')
          .marker(data-linked-step=4, style="color: rgba(129, 75, 152, 1)")
        .code-steps
          .code-steps-code
            pre.language-(data-linked-step=1)
              code.language-.
                linear-gradient(
                  to right,
                  <span data-code-colour>hsl(220, 90%, 50%)</span>,
                  <span data-code-colour>hsl(  0, 90%, 60%)</span>
                </span>);
            pre.language-(data-linked-step=2)
              code.language-.
                linear-gradient(
                  to right,
                  <span data-code-colour>rgba(13, 89, 242, 1)</span>,
                  <span data-code-colour>rgba(245, 61, 61, 1)</span>
                </span>);
            pre.language-(data-linked-step=3)
              code.language-.
                linear-gradient(
                  to right,
                  <span data-code-colour>rgba( 13, 89, 242, 1)</span>,
                <span class="code-comment">/*      ↓   ↓    ↓   ↓ */</span>
                  <span data-code-colour>rgba(245, 61,  61, 1)</span>
                </span>);
            pre.language-(data-linked-step=4)
              code.language-.
                linear-gradient(
                  to right,
                  <span data-code-colour>rgba( 13, 89, 242, 1)</span>,
                <span class="code-comment">/*      ↓   ↓    ↓   ↓ </span>
                  <span data-code-colour>rgba(129, 75, 152, 1)</span>
                <span class="code-comment">        ↓   ↓    ↓   ↓ */</span>
                  <span data-code-colour>rgba(245, 61,  61, 1)</span>
                </span>);
          ol.code-steps-info
            li(data-linked-step=1) A simple gradient
            li(data-linked-step=2) Convert to RGBA
            li(data-linked-step=3) Interpolate each channel separately
            li(data-linked-step=4) Example at 50%

      section.demo-transparency(data-bespoke-hash='transparency')
        h2 Transparency
        p
          code transparent == rgba(0, 0, 0, 0)
          .step-container
            pre.language-(data-linked-step=3)
              code.language-.
                linear-gradient(red, rgba(255,0,0,0) 50%,
                                     rgba(0,0,255,0) 50%, blue);
            pre.language-.hide-when-previous-visible
              code.language-.
                linear-gradient(red, transparent, blue);


        .trans-demo
          .trans-list
            .wrapper
              h3(data-linked-step=1) Old spec
              h4(data-linked-step=1) “Normal”<br>colour
              ul(data-linked-step=2)
                li Safari
                li Canvas
                li SVG
          .example
            include premul-gradient-svg
          .example
            - var usePremul = true
            include premul-gradient-svg
          .trans-list
            h3(data-linked-step=1) New spec
            h4(data-linked-step=1) Pre-multiplied alpha
            ul(data-linked-step=2)
              li Chrome
              li Firefox
              li IE / Edge

      section.quote-premul(data-bespoke-hash='premultiplied-alpha')
        h2 Pre-whatified what now?
        p Pre-multiplied alpha &ndash; keeping <code>transparent</code> pretty
        blockquote.single-bullet(data-linked-step=1)
          p The formula for simple alpha compositing is
          code co = Cs x αs + Cb x αb x (1 - αs)
          p Where
          ul
            li <code>co</code>: the premultiplied pixel value after compositing
            li <code>Cs</code>: the color value of the source graphic element being composited
            li <code>αs</code>: the alpha value of the source graphic element being composited
            li <code>Cb</code>: the color value of the backdrop
            li <code>αb</code>: the alpha value of the backdrop
          cite <a href="http://dev.w3.org/fxtf/compositing-1/#generalformula">W3C: CSS Compositing and Blending Level 1</a>
        h3.wtf(data-linked-step=2) Simple, right?

      section.demo-blend-basic(data-bespoke-hash='blending-basic')
        h2 Let’s try again &mdash; Blending 101
        p.subtitle
          span(data-linked-step=0) Blending partly-transparent red on a white background.
          span(data-linked-step=1) 1. Multiply source by the alpha value.
          span(data-linked-step=2) 2. Multiply background by the <strong>inverse</strong> source alpha value.
          span(data-linked-step=3) 3. Add them together
        .example
          span
        .demo-holder
          table.channels
            tr
              th
              th(colspan=2): code source<br>&nbsp;<span class="highlight" data-linked-step="1">&times; 0.6</span>
              th(colspan=2): code + destination<br>&nbsp;<span class="highlight" data-linked-step="2">&times; 0.4</span>
              th(colspan=2, data-linked-step=3): code = output<br><span class="highlight">&nbsp;</span>
            tr.channel-red
              td.channel-name R
              td(data-type='source'): code
              td(data-type='source'): .channel-meter: .channel-fill
              td(data-type='dest'): code
              td(data-type='dest'): .channel-meter: .channel-fill
              td(data-type='output', data-linked-step=3): code
              td(data-type='output', data-linked-step=3): .channel-meter: .channel-fill
            tr.channel-green
              td.channel-name G
              td(data-type='source'): code
              td(data-type='source'): .channel-meter: .channel-fill
              td(data-type='dest'): code
              td(data-type='dest'): .channel-meter: .channel-fill
              td(data-type='output', data-linked-step=3): code
              td(data-type='output', data-linked-step=3): .channel-meter: .channel-fill
            tr.channel-blue
              td.channel-name B
              td(data-type='source'): code
              td(data-type='source'): .channel-meter: .channel-fill
              td(data-type='dest'): code
              td(data-type='dest'): .channel-meter: .channel-fill
              td(data-type='output', data-linked-step=3): code
              td(data-type='output', data-linked-step=3): .channel-meter: .channel-fill
            tr.channel-alpha
              td.channel-name A
              td(data-type='source'): code
              td(data-type='source'): .channel-meter: .channel-fill
              td(data-type='dest'): code
              td(data-type='dest'): .channel-meter: .channel-fill
              td(data-type='output', data-linked-step=3): code
              td(data-type='output', data-linked-step=3): .channel-meter: .channel-fill

      section(data-bespoke-hash='gpu-chat')
        h2 Now back to gradients
        .demo-holder
          ol.conversation
            li.part-title.title-a GPU
            li.part-title.title-b Browser
            li.part-b(data-linked-step=1) Please draw colour at the 40% mark
            li.part-a(data-linked-step=2) OK. What’s the <abbr title="linearly interpolated">lerp</abbr> red here?
            li.part-b(data-linked-step=3) 0.6
            li.part-a(data-linked-step=4) And what’s the lerp alpha here?
            li.part-b(data-linked-step=5) 0.6
            li.part-a(data-linked-step=6) Cool, 0.6 x 0.6 = 0.36
            li.part-a(data-linked-step=7) I will draw 0.36 red + 0.4 of the background red
            li.part-a(data-linked-step=8) Final value is 0.76 red with 0.6 alpha

      section.demo-blend-gradient(data-bespoke-hash='blending-gradients', data-demo-def='red-trans')
        h2 A little less conversation <small>(a little more graphin’)</small>
        .demo-holder
          table.channels
            tr.examples
              td.colour-def
              td
                canvas.example
              td.colour-def
            tr.title
              td
              td: h4 Normal
            tr.channel-red
              td.channel-name R
              td.channel-graph: canvas(data-type='r')
            tr.channel-alpha
              td.channel-name A
              td.channel-graph: canvas(data-type='a')
            tr.title(data-linked-step=4)
              td
              td: h4 Pre-multiplied
            tr.channel-red(data-linked-step=4)
              td.channel-name R
              td.channel-graph: canvas(data-type='r-pre')
            tr.channel-alpha(data-linked-step=4)
              td.channel-name A
              td.channel-graph: canvas(data-type='a-pre')

      section(data-bespoke-hash='pre-mulling-it-over')
        h2 Back to chat
        blockquote.single-bullet(data-linked-step=0)
          p Often, it can be more efficient to store a pre-multiplied value for the color and opacity. The pre-multiplied value is given by
          code cs = Cs x αs
          cite <a href="http://dev.w3.org/fxtf/compositing-1/#generalformula">W3C: CSS Compositing and Blending Level 1</a>
        .demo-holder(data-linked-step=1)
          ol.conversation
            li.part-title.title-a GPU
            li.part-title.title-b Browser
            li.part-b(data-linked-step=2) Let me multiply the red at the start...
            li.part-b(data-linked-step=3) Now please draw colour at the 40% mark
            li.part-a(data-linked-step=4) OK. What’s the lerp red here?
            li.part-b(data-linked-step=5) 0.6, but <strong>don’t bloody touch it</strong>
            li.part-a(data-linked-step=6) Yeesh, calm down. And what’s the lerp alpha here?
            li.part-b(data-linked-step=7) 0.6
            li.part-a(data-linked-step=8) Cool, I will draw 0.6 red + 0.4 of the background red
            li.part-a(data-linked-step=9) Final value is 1 red with 0.6 alpha

      section(data-bespoke-hash='postcss-premul')
        h2 Post vs pre
        p More self promotion &mdash; <a href="https://github.com/gilmoreorless/postcss-gradient-transparency-fix">PostCSS gradient transparency fix</a>
        p: img(src='images/postcss-fix.png')


      // FINALE
      
      section(data-bespoke-state='title', data-bespoke-backdrop='title', data-bespoke-hash='grand-finale')
        h1 Grand Finale

      section.demo-logo.no-zoom(data-bgimage-showcase, data-bespoke-state='showcase', data-bespoke-hash='this-is-the-last-slide')
        .showcase-container
          .showcase-target(data-showcase-start-mode='exploded', data-showcase-timing='slow')
          //- .showcase-target.redacted(data-showcase-start-mode='3d-expanded')
        h2 Thanks, Decompress!
        h4 @iamnotyourbroom
        p.instructions Use number keys<br><kbd>1</kbd> to <kbd>4</kbd><br>to change the image
        

    script(src='build/build.js')
